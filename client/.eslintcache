[{"C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\index.js":"1","C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\reportWebVitals.js":"2","C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\App.js":"3","C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\Views\\Orders.jsx":"4","C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\Views\\Landing.jsx":"5","C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\config\\axios.js":"6","C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\Components\\Layout.jsx":"7","C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\Views\\Items.jsx":"8"},{"size":535,"mtime":1611312063634,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":490,"mtime":1611498814581,"results":"12","hashOfConfig":"10"},{"size":7750,"mtime":1611500519558,"results":"13","hashOfConfig":"10"},{"size":1849,"mtime":1611570632328,"results":"14","hashOfConfig":"10"},{"size":375,"mtime":1611417535258,"results":"15","hashOfConfig":"10"},{"size":3401,"mtime":1611571257923,"results":"16","hashOfConfig":"10"},{"size":6677,"mtime":1611499444133,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"c5u5p7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\index.js",[],["37","38"],"C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\reportWebVitals.js",[],"C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\App.js",[],"C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\Views\\Orders.jsx",["39","40","41","42","43","44","45"],"import React, { useEffect, useState } from 'react';\r\n\r\n//importing all components\r\nimport Layout from '../Components/Layout';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber,\r\n    TreeSelect,\r\n    Switch,\r\n    message,\r\n    Table\r\n} from 'antd';\r\nimport { GiFoodTruck, GiHamburger } from 'react-icons/gi';\r\nimport { AiFillDelete } from 'react-icons/ai'\r\nimport { FaCashRegister } from 'react-icons/fa';\r\nimport axios from '../config/axios';\r\n\r\nconst Orders = () => {\r\n\r\n    const [totalBill, setTotalBill] = useState(0);\r\n    const [items, setItems] = useState([]);\r\n    const [orders, setOrders] = useState([]);\r\n    const [refresh, setRefresh] = useState(null);\r\n\r\n    useEffect(() => {\r\n        axios.get('/items/').then(response => {\r\n            setItems(response.data);\r\n        });\r\n        axios.get('/orders/').then(response => {\r\n            setOrders(response.data);\r\n        });\r\n    }, [refresh]);\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    \r\n  //Table setup\r\n  const columns = [\r\n    {\r\n      title: 'Id',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      title: 'Table',\r\n      dataIndex: 'tableNo',\r\n      key: 'tableNo',\r\n    },\r\n    {\r\n      title: 'Waiter',\r\n      dataIndex: 'waiter',\r\n      key: 'waiter',\r\n    },\r\n    {\r\n      title: 'Items',\r\n      key: 'items',\r\n      dataIndex: 'items',\r\n    },\r\n    {\r\n      title: 'Amount',\r\n      key: 'totalAmount',\r\n      dataIndex: 'totalAmount',\r\n    },\r\n    {\r\n      title: 'Paid',\r\n      key: 'paid',\r\n      dataIndex: 'paid',\r\n    },\r\n    {\r\n      title: 'Payment Method',\r\n      key: 'paymentMethod',\r\n      dataIndex: 'paymentMethod',\r\n    },\r\n  ]\r\n\r\n\r\n    //defining onFinishHandler function\r\n    const onFinishOrderHandler = (value) => {\r\n        console.log(value.order);\r\n\r\n        let payload = {\r\n            tableNo: value.order.tableNo,\r\n            waiter: value.order.waiter,\r\n            items: value.order.items.join(),\r\n            totalAmount: totalBill,\r\n            paid: value.order.paid,\r\n            paymentMethod: value.order.paymentMethod\r\n        }\r\n\r\n        axios.post('/orders/', payload).then(response => {\r\n            console.log(response.data);\r\n            setRefresh(Math.random());\r\n            message.success('Order created successfully');\r\n        })\r\n    }\r\n\r\n    //defining itemOnChangeHandler function\r\n    const itemOnChangeHandler = (value) => {\r\n        //let arr = value.split('-');\r\n        //console.log(arr[0]);\r\n        // console.log(value);\r\n        let bill = 0;\r\n        for (let i = 0; i < value.length; i++) {\r\n            let arr = value[0].split('-');\r\n            bill = bill + parseInt(arr[1]);\r\n        }\r\n\r\n        console.log(bill);\r\n        setTotalBill(bill);\r\n    }\r\n    return (\r\n        <Layout>\r\n\r\n            <Row gutter={[20, 20]}>\r\n                <Col span={12}>\r\n                    <div className=\"cardx\">\r\n                        <span className=\"the-title\">\r\n                            <GiFoodTruck size={25} />\r\n                            Create New Order\r\n                        </span>\r\n                        <Form\r\n                            {...layout}\r\n                            layout=\"horizontal\"\r\n                            onFinish={onFinishOrderHandler}\r\n                        >\r\n\r\n                            {/* Table No */}\r\n                            <Form.Item name={['order', 'tableNo']} rules={[{ required: true }]} label=\"Select Table No\">\r\n                                <Select>\r\n                                    <Select.Option value=\"1\">1</Select.Option>\r\n                                    <Select.Option value=\"2\">2</Select.Option>\r\n                                    <Select.Option value=\"3\">3</Select.Option>\r\n                                    <Select.Option value=\"4\">4</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n\r\n                            {/* Waiter */}\r\n                            <Form.Item name={['order', 'waiter']} rules={[{ required: true }]} label=\"Select Assigned Waiter\">\r\n                                <Select>\r\n                                    <Select.Option value=\"Shamim Ferdous\">Shamim Ferdous</Select.Option>\r\n                                    <Select.Option value=\"Rayat Sayeb\">Rayat Sayeb</Select.Option>\r\n                                    <Select.Option value=\"Merilyn Dip Peris\">Marilyn Dip Peris</Select.Option>\r\n                                    <Select.Option value=\"Antara Labiba\">Antara Labiba</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n\r\n                            {/* Items */}\r\n                            <Form.Item name={['order', 'items']} rules={[{ required: true }]} label=\"Select Order Items\">\r\n                                <Select onChange={itemOnChangeHandler} mode=\"multiple\">\r\n                                    {\r\n                                        items.map(item => {\r\n                                            return <Select.Option key={item.id} value={`${item.name}-${item.unitPrice}`}>{item.name}</Select.Option>\r\n                                        })\r\n                                    }\r\n\r\n                                </Select>\r\n                            </Form.Item>\r\n\r\n                            {/* Paid */}\r\n                            <Form.Item name={['order', 'paid']} label=\"Is Paid?\">\r\n                                <Switch />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name={['order', 'paymentMethod']} label=\"Payment Method\" >\r\n                                <Select>\r\n                                    <Select.Option value=\"Cash\">Cash</Select.Option>\r\n                                    <Select.Option value=\"Card\">Card</Select.Option>\r\n                                    <Select.Option value=\"Bkash\">Bkash</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n\r\n\r\n                            <div>\r\n                                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                                    <Row style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <Col span={12}>\r\n                                            <span className=\"total-bill\">\r\n                                                <FaCashRegister size={30} />\r\n                                                {totalBill} BDT\r\n                                            </span>\r\n                                        </Col>\r\n                                        <Col span={12}>\r\n                                            <Button style={{ width: '100%' }} type=\"primary\" danger htmlType=\"submit\">\r\n                                                Create Order\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form.Item>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <div className=\"cardx\">\r\n                        <span className=\"the-title\">\r\n                            <GiHamburger size={25} />\r\n                            All Orders\r\n                        </span>\r\n                        <Table columns={columns} dataSource={orders} />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Orders;","C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\Views\\Landing.jsx",["46","47","48","49","50"],"C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\config\\axios.js",[],"C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\Components\\Layout.jsx",["51"],"C:\\Users\\B A T  M A C H I N E\\Desktop\\Bat_Desk\\pos-prototype\\client\\src\\Views\\Items.jsx",["52","53","54","55","56","57","58","59","60"],"import React, { useEffect, useState } from 'react';\r\n\r\n//importing all components\r\nimport Layout from '../Components/Layout';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber,\r\n    TreeSelect,\r\n    Switch,\r\n    message,\r\n    Table\r\n} from 'antd';\r\nimport { GiFoodTruck, GiHamburger } from 'react-icons/gi';\r\nimport { AiFillDelete } from 'react-icons/ai'\r\nimport { FaCashRegister } from 'react-icons/fa';\r\nimport axios from '../config/axios';\r\n\r\nconst Items = () => {\r\n\r\n    const [totalBill, setTotalBill] = useState(0);\r\n    const [items, setItems] = useState([]);\r\n    const [refresh, setRefresh] = useState(null);\r\n\r\n    useEffect(() => {\r\n        axios.get('/items/').then(response => {\r\n            setItems(response.data);\r\n        });\r\n    }, [refresh]);\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    //defining deleteHandler function\r\n    const deleteHandler = (id) => {\r\n        axios.delete(`/items/${id}`).then(response => {\r\n            console.log(response.data);\r\n            setRefresh(Math.random());\r\n            message.warning('Item deleted successfully');\r\n        })\r\n    }\r\n\r\n\r\n    //defining onFinishHandler function\r\n    const onFinishOrderHandler = (value) => {\r\n        console.log(value.order);\r\n\r\n        let payload = {\r\n            tableNo: value.order.tableNo,\r\n            waiter: value.order.waiter,\r\n            items: value.order.items.join(),\r\n            totalAmount: totalBill,\r\n            paid: value.order.paid,\r\n            paymentMethod: value.order.paymentMethod\r\n        }\r\n\r\n        axios.post('/orders/', payload).then(response => {\r\n            console.log(response.data);\r\n            setRefresh(Math.random());\r\n            message.success('Order created successfully');\r\n        })\r\n    }\r\n\r\n    //defining onFinishItemHandler function\r\n    const onFinishItemHandler = (value) => {\r\n        console.log(value);\r\n        axios.post('/items/', value.item).then(response => {\r\n            console.log(response);\r\n            setRefresh(Math.random());\r\n            message.success('Item created successfully!');\r\n        })\r\n    }\r\n\r\n    //defining itemOnChangeHandler function\r\n    const itemOnChangeHandler = (value) => {\r\n        //let arr = value.split('-');\r\n        //console.log(arr[0]);\r\n        // console.log(value);\r\n        let bill = 0;\r\n        for (let i = 0; i < value.length; i++) {\r\n            let arr = value[0].split('-');\r\n            bill = bill + parseInt(arr[1]);\r\n        }\r\n\r\n        console.log(bill);\r\n        setTotalBill(bill);\r\n    }\r\n\r\n\r\n\r\n\r\n    //Table setup\r\n    const columns = [\r\n        {\r\n            title: 'Id',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Category',\r\n            dataIndex: 'category',\r\n            key: 'category',\r\n        },\r\n        {\r\n            title: 'Unit',\r\n            key: 'unit',\r\n            dataIndex: 'unit',\r\n        },\r\n        {\r\n            title: 'Unit Price',\r\n            key: 'unitPrice',\r\n            dataIndex: 'unitPrice',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <AiFillDelete style={{ cursor: 'pointer' }} onClick={() => deleteHandler(record.id)} size={20} color={'red'} />\r\n            )\r\n        },\r\n\r\n\r\n    ];\r\n\r\n    return (\r\n        <Layout>\r\n\r\n            <Row gutter={[20, 20]}>\r\n                <Col span={12}>\r\n                    <div className=\"cardx\">\r\n                        <span className=\"the-title\">\r\n                            <GiHamburger size={25} />\r\n                            Create New Item\r\n                        </span>\r\n                        <Form\r\n                            {...layout}\r\n                            layout=\"horizontal\"\r\n                            onFinish={onFinishItemHandler}\r\n                        >\r\n\r\n                            {/* Name */}\r\n                            <Form.Item name={['item', 'name']} rules={[{ required: true }]} label=\"Enter item name\">\r\n                                <Input />\r\n                            </Form.Item>\r\n\r\n                            {/* Category */}\r\n                            <Form.Item name={['item', 'category']} rules={[{ required: true }]} label=\"Select Item Category\">\r\n                                <Select>\r\n                                    <Select.Option value=\"Appetizers\">Appetizers</Select.Option>\r\n                                    <Select.Option value=\"Drinks\">Drinks</Select.Option>\r\n                                    <Select.Option value=\"Burgers\">Burgers</Select.Option>\r\n                                    <Select.Option value=\"Platters\">Platters</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n\r\n                            {/* Unit */}\r\n                            <Form.Item name={['item', 'unit']} rules={[{ required: true }]} label=\"Enter item unit\">\r\n                                <Input />\r\n                            </Form.Item>\r\n\r\n                            {/* Unit Price */}\r\n                            <Form.Item name={['item', 'unitPrice']} rules={[{ required: true }]} label=\"Enter item unit price\">\r\n                                <Input />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                                <Row style={{ display: 'flex', alignItems: 'center' }}>\r\n                                    <Col span={24}>\r\n                                        <Button style={{ width: '100%' }} danger type=\"primary\" htmlType=\"submit\">\r\n                                            Create Item\r\n                                            </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form.Item>\r\n\r\n                        </Form>\r\n                    </div>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <div className=\"cardx\">\r\n                        <span className=\"the-title\">\r\n                            <GiFoodTruck size={25} />\r\n                            All Items\r\n                        </span>\r\n\r\n                        <Table columns={columns} dataSource={items} />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Items;",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":9,"column":5,"nodeType":"67","messageId":"68","endLine":9,"endColumn":10},{"ruleId":"65","severity":1,"message":"69","line":11,"column":5,"nodeType":"67","messageId":"68","endLine":11,"endColumn":10},{"ruleId":"65","severity":1,"message":"70","line":13,"column":5,"nodeType":"67","messageId":"68","endLine":13,"endColumn":13},{"ruleId":"65","severity":1,"message":"71","line":14,"column":5,"nodeType":"67","messageId":"68","endLine":14,"endColumn":15},{"ruleId":"65","severity":1,"message":"72","line":15,"column":5,"nodeType":"67","messageId":"68","endLine":15,"endColumn":16},{"ruleId":"65","severity":1,"message":"73","line":16,"column":5,"nodeType":"67","messageId":"68","endLine":16,"endColumn":15},{"ruleId":"65","severity":1,"message":"74","line":22,"column":10,"nodeType":"67","messageId":"68","endLine":22,"endColumn":22},{"ruleId":"65","severity":1,"message":"75","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":26},{"ruleId":"65","severity":1,"message":"76","line":1,"column":28,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"74","line":10,"column":10,"nodeType":"67","messageId":"68","endLine":10,"endColumn":22},{"ruleId":"65","severity":1,"message":"77","line":11,"column":10,"nodeType":"67","messageId":"68","endLine":11,"endColumn":24},{"ruleId":"65","severity":1,"message":"78","line":13,"column":10,"nodeType":"67","messageId":"68","endLine":13,"endColumn":22},{"ruleId":"65","severity":1,"message":"75","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":26},{"ruleId":"65","severity":1,"message":"69","line":11,"column":5,"nodeType":"67","messageId":"68","endLine":11,"endColumn":10},{"ruleId":"65","severity":1,"message":"70","line":13,"column":5,"nodeType":"67","messageId":"68","endLine":13,"endColumn":13},{"ruleId":"65","severity":1,"message":"71","line":14,"column":5,"nodeType":"67","messageId":"68","endLine":14,"endColumn":15},{"ruleId":"65","severity":1,"message":"72","line":15,"column":5,"nodeType":"67","messageId":"68","endLine":15,"endColumn":16},{"ruleId":"65","severity":1,"message":"73","line":16,"column":5,"nodeType":"67","messageId":"68","endLine":16,"endColumn":15},{"ruleId":"65","severity":1,"message":"79","line":17,"column":5,"nodeType":"67","messageId":"68","endLine":17,"endColumn":11},{"ruleId":"65","severity":1,"message":"77","line":23,"column":10,"nodeType":"67","messageId":"68","endLine":23,"endColumn":24},{"ruleId":"65","severity":1,"message":"80","line":54,"column":11,"nodeType":"67","messageId":"68","endLine":54,"endColumn":31},{"ruleId":"65","severity":1,"message":"81","line":84,"column":11,"nodeType":"67","messageId":"68","endLine":84,"endColumn":30},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","'Radio' is defined but never used.","'Cascader' is defined but never used.","'DatePicker' is defined but never used.","'InputNumber' is defined but never used.","'TreeSelect' is defined but never used.","'AiFillDelete' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'FaCashRegister' is defined but never used.","'GrRestaurant' is defined but never used.","'Switch' is defined but never used.","'onFinishOrderHandler' is assigned a value but never used.","'itemOnChangeHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]